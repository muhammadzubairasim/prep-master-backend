// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  passwordHash      String
  firstName         String
  lastName          String
  role              Role
  profilePictureUrl String?
  bio               String?
  verified          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  testSeries  TestSeries[] @relation("InstructorTestSeries")
  enrollments Enrollment[]
  Review      Review[]
  otps        Otp[]
}

model Otp {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum DurationType {
  MINUTES
  HOURS
}

model TestSeries {
  id           String       @id @default(uuid())
  title        String
  description  String
  price        Float
  language     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // Relationships
  instructor   User         @relation("InstructorTestSeries", fields: [instructorId], references: [id])
  instructorId String
  categories   Category[]   @relation("TestSeriesCategories")
  tests        Test[]
  enrollments  Enrollment[]
  Review       Review[]
  tags         String[]
}

model Category {
  id         String       @id @default(uuid())
  name       String       @unique
  testSeries TestSeries[] @relation("TestSeriesCategories")
}

model Test {
  id           String       @id @default(uuid())
  title        String
  duration     Int
  durationType DurationType
  testSeries   TestSeries   @relation(fields: [testSeriesId], references: [id])
  testSeriesId String
  questions    Question[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  text          String
  options       Json // Store options as JSON, e.g., [{ "A": "Option 1", "B": "Option 2", "C": "Option 3", "D": "Option 4" }]
  correctOption String // Stores the correct option (e.g., "A")
  test          Test     @relation(fields: [testId], references: [id])
  testId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Enrollment {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  testSeries   TestSeries @relation(fields: [testSeriesId], references: [id])
  testSeriesId String
  enrolledAt   DateTime   @default(now())
}

model Review {
  id           String     @id @default(uuid())
  rating       Int
  comment      String?
  testSeriesId String
  testSeries   TestSeries @relation(fields: [testSeriesId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User       @relation(fields: [userId], references: [id])
}
